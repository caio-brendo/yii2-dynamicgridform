class DynamicGridForm{config;insertButton;table;index;static bottom="bottom";static top="top";constructor(t){this.config=t,this.insertButton=$("#"+t.insertButton),this.table=$("#"+t.tableId),this.index=this.currentTotalRows,this.insertButton.on("click",this.handleClickInsertButton.bind(this)),this.deleteRowClass&&$(document).on("click",`#${this.widgetContainer} .${this.deleteRowClass}`,this.handleDeleteRow.bind(this)),$(document).on("click",this.selectorTableRows,this.handleClickRow.bind(this)),$("#"+this.config.widgetContainer).on("cancelEdit",this.cancelEdit.bind(this))}limitReached(){return 0!==this.config.max&&this.index+1>this.config.max}handleLimitReached(){this.triggerLimitReached()}get columns(){return this.config.columns}isInsertBottom(){return this.config.insertPosition===DynamicGridForm.bottom}async handleClickInsertButton(){if(this.isEditMode()){this.triggerBeforeUpdate();const t=await this.getHtmlRow(),e=this.rowEdit;e.after(t),e.remove(),this.reorderInputs(),this.triggerAfterUpdate(t)}else{if(this.limitReached())return void this.handleLimitReached();if(!1===await this.triggerBeforeInsertEvent())return;const t=await this.getHtmlRow();this.isInsertBottom()?this.tableBody.append(t):this.tableBody.prepend(t),this.triggerAfterInsertEvent(t),this.incrementIndex()}}async triggerBeforeInsertEvent(){const t=await this.getValueColumns(),e=await this.getAllDataTable();return $("#"+this.config.widgetContainer).triggerHandler("beforeInsert",[t,e,this])}triggerAfterInsertEvent(t){$("#"+this.config.widgetContainer).triggerHandler("afterInsert",t)}triggerLimitReached(){$("#"+this.config.widgetContainer).triggerHandler("limitReached")}getTrHtml(t){return`<tr ${this.rowOptions}>${t}</tr>`}async handleDeleteRow(t){t.stopPropagation();const{currentTarget:e}=t,i=$(e).parent().parent();!1!==this.triggerBeforeDelete(i.get(0))&&(i.remove(),this.reorderInputs(),this.triggerAfterDelete(i))}incrementIndex(){this.index+=1}decrementIndex(){this.index-=1}get index(){return this.index}handleClickRow(t){const{currentTarget:e}=t;if(this.config.allowEdit){this.isEditMode()&&this.cancelEdit(),$(e).attr("data-edit",!0);let t=[];$(e).find("input[data-reference]").each(((e,i)=>{const n=$(i).attr("data-reference"),r=$("#"+n);-1===t.indexOf(n)&&InputHelper.elementIsDiv(r)&&r.find('input[type="checkbox"]').prop("checked",!1),-1===t.indexOf(n)&&InputHelper.inputIsSelectMultiple(r)&&r.val("");InputFactory.getInstance(r).setValue($(i).val()),t.push(n)}))}}async getValueColumns(){const t={};for(const[e,i]of this.columns.entries())if(i.id){const n=$("#"+i.id),r=InputFactory.getInstance(n,{input:n,baseName:i.templateInputName,index:e,reference:i.id});if(t[i.attribute])if(Array.isArray(t[i.attribute]))t[i.attribute].push(await r.getValue());else{const e=t[i.attribute];t[i.attribute]=[e,await r.getValue()]}else t[i.attribute]=await r.getValue()}return t}get tableId(){return this.config.options.id}get table(){return $(`#${this.tableId}`)}get tableBody(){return $(`#${this.tableId}`).find("tbody")}get rowOptions(){const t=this.config.rowOptions;return Object.keys(t).reduce(((e,i)=>e+`${i}="${t[i]}" `),"").trim()}get deleteRowClass(){return this.config.deleteRowClass}get widgetContainer(){return this.config.widgetContainer}get selectorTableRows(){return`#${this.widgetContainer} tbody tr`}reorderInputs(){$(this.selectorTableRows).each(((t,e)=>{$(e).find('input[type="hidden"]').each(((e,i)=>{$(i).attr("name",$(i).attr("name").replace(/\[\d+\]/,`[${t}]`))}))})),this.index=this.currentTotalRows}get currentTotalRows(){return $(this.selectorTableRows).length}isEditMode(){return!!this.tableBody.find('tr[data-edit="true"]').length}get rowEdit(){return this.tableBody.find('tr[data-edit="true"]')}async getHtmlRow(){let t="";const e=await this.getValueColumns();for(const i of this.columns){const n=$("#"+i.id);t+=await i.classJs.renderContent(e,this.index),i.cleanAfterInsert&&n.val("").trigger("change")}return t=this.getTrHtml(t),t=$(t),t}async triggerBeforeUpdate(){$("#"+this.config.widgetContainer).triggerHandler("beforeUpdate",await this.getValueColumns())}triggerAfterUpdate(t){$("#"+this.config.widgetContainer).triggerHandler("afterUpdate",t)}cancelEdit(){this.rowEdit.removeAttr("data-edit")}async getAllDataTable(){const t=[];for(const[e,i]of $(this.selectorTableRows).toArray().entries()){let n={};for(const[t,r]of this.columns.entries())if(r.classJs instanceof TextColumn){const t=r.templateInputName.replace("<@>",e),s=$(i).find(`input[name="${t}"]`),a=InputFactory.getInstance(s);n[r.attribute]=await a.getValue()}t.push(n)}return t}async triggerBeforeDelete(t){return $("#"+this.config.widgetContainer).triggerHandler("beforeDelete",[t,this])}triggerAfterDelete(t){$("#"+this.config.widgetContainer).triggerHandler("afterDelete",[t,this])}}